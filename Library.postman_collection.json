{
	"info": {
		"_postman_id": "94f12674-06ec-441d-8f17-78ba0a7e1be2",
		"name": "Library",
		"description": "This project demonstrates a RESTful API built with **Node.js** and **JSON Server**. It includes endpoints for **Books**, **Households**, **Users**, and **Wishlists**, supporting full CRUD operations: **Create**, **Read**, **Update**, and **Delete**\n\n<img src=\"https://content.pstmn.io/1b2ca7bb-3fcc-4950-9329-45fb0c51ab22/aW1hZ2VzLnBuZw==\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18930967",
		"_collection_link": "https://yxyxyxyxyxyx.postman.co/workspace/Library~1def04b0-3f5c-47d0-9844-9972422a2811/collection/18930967-94f12674-06ec-441d-8f17-78ba0a7e1be2?action=share&source=collection_link&creator=18930967"
	},
	"item": [
		{
			"name": "1- Books",
			"item": [
				{
					"name": "1.1 Create New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.4] TC04 - Validate that response body is a valid JSON\r",
									"pm.test(\"[1.4] TC04 - Validate that response body is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// [2.1] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[2.1] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.2] TC06 - Validate field data types are correct\r",
									"pm.test(\"[2.2] TC06 - Validate field data types are correct\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.3] TC07 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [2.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\r",
									"pm.test(\"[2.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.5] TC09 - Validate that updatedAt is equal to or after createdAt\r",
									"pm.test(\"[2.5] TC09 - Validate that updatedAt is equal to or after createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"// [2.6] TC10 - Validate that title, author, and isbn are not empty\r",
									"pm.test(\"[2.6] TC10 - Validate that title, author, and isbn are not empty\", function () {\r",
									"    pm.expect(jsonData.title).to.not.be.empty;\r",
									"    pm.expect(jsonData.author).to.not.be.empty;\r",
									"    pm.expect(jsonData.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.7] TC11 - Validate that releaseDate is not a future date\", function () {\r",
									"    const release = new Date(jsonData.releaseDate);\r",
									"    const now = new Date();\r",
									"    pm.expect(release.getTime()).to.be.below(now.getTime());\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC12 - Validate that id is unique across requests\", function () {\r",
									"    let previousId = pm.collectionVariables.get(\"previous_id\");\r",
									"    if (previousId) {\r",
									"        pm.expect(jsonData.id).to.not.eql(Number(previousId));\r",
									"    }\r",
									"    pm.collectionVariables.set(\"previous_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC13 - Validate no extra fields are present\", function () {\r",
									"    const actualKeys = Object.keys(jsonData);\r",
									"    const expectedKeys = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"    pm.expect(actualKeys).to.have.members(expectedKeys);\r",
									"    pm.expect(actualKeys.length).to.eql(expectedKeys.length);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.3] TC14 - Validate createdAt and updatedAt are equal on creation\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"],\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"author\": { \"type\": \"string\" },\r",
									"        \"isbn\": { \"type\": \"string\" },\r",
									"        \"releaseDate\": { \"type\": \"string\" },\r",
									"        \"createdAt\": { \"type\": \"string\" },\r",
									"        \"updatedAt\": { \"type\": \"string\" },\r",
									"        \"id\": { \"type\": \"number\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"[4.1] TC15 - Validate response against JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"BookID\",pm.response.json().id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWord}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}\",\r\n    \"releaseDate\": \"{{$isoTimestamp}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books",
							"host": [
								"{{baseURL}}books"
							]
						},
						"description": "Create a new book."
					},
					"response": []
				},
				{
					"name": "1.2 Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.2] TC02 - Validate that response time is under 1000ms\r",
									"pm.test(\"[1.2] TC02 - Validate that response time is under 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// [1.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.2] TC04 - Validate that response body is a valid array\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"[1.2] TC04 - Validate that response body is a valid array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [1.2] TC05 - Validate that each book has required fields\r",
									"pm.test(\"[1.2] TC05 - Validate that each book has required fields\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book).to.have.property(\"id\");\r",
									"        pm.expect(book).to.have.property(\"title\");\r",
									"        pm.expect(book).to.have.property(\"author\");\r",
									"        pm.expect(book).to.have.property(\"isbn\");\r",
									"        pm.expect(book).to.have.property(\"createdAt\");\r",
									"        pm.expect(book).to.have.property(\"updatedAt\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC06 - Validate field data types for each book\r",
									"pm.test(\"[1.2] TC06 - Validate field data types for each book\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book.id).to.be.a(\"number\");\r",
									"        pm.expect(book.title).to.be.a(\"string\");\r",
									"        pm.expect(book.author).to.be.a(\"string\");\r",
									"        pm.expect(book.isbn).to.be.a(\"string\");\r",
									"        pm.expect(book.createdAt).to.be.a(\"string\");\r",
									"        pm.expect(book.updatedAt).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC07 - Validate that all books have unique IDs\r",
									"pm.test(\"[1.2] TC07 - Validate that all books have unique IDs\", function () {\r",
									"    const ids = jsonData.map(book => book.id);\r",
									"    const uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"\r",
									"// [1.2] TC08 - Validate ISO 8601 format for createdAt and updatedAt\r",
									"pm.test(\"[1.2] TC08 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book.createdAt).to.match(isoRegex);\r",
									"        pm.expect(book.updatedAt).to.match(isoRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC09 - Validate optional presence and structure of 'links' array\r",
									"pm.test(\"[1.2] TC08 - Validate optional 'links' array format\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        if (book.links) {\r",
									"            pm.expect(book.links).to.be.an(\"array\");\r",
									"            book.links.forEach(link => {\r",
									"                pm.expect(link).to.have.property(\"rel\");\r",
									"                pm.expect(link).to.have.property(\"href\");\r",
									"                pm.expect(link.rel).to.be.a(\"string\");\r",
									"                pm.expect(link.href).to.be.a(\"string\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC10 - Validate that publicationDate or releaseDate exists and is valid if present\r",
									"pm.test(\"[1.2] TC10 - Validate date field formats\", function () {\r",
									"    const isoFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;         // Full ISO\r",
									"    const isoLikeFormat = /^\\d{4}-\\d{2}-\\d{2}$/;                              // ISO without time\r",
									"    const slashFormat = /^(0[1-9]|1[0-2])\\/(0[1-9]|[12]\\d|3[01])\\/\\d{4}$/;    // MM/DD/YYYY\r",
									"\r",
									"    jsonData.forEach(book => {\r",
									"        let dateField = book.publicationDate || book.releaseDate;\r",
									"        if (dateField) {\r",
									"            const isValid =\r",
									"                isoFormat.test(dateField) ||\r",
									"                isoLikeFormat.test(dateField) ||\r",
									"                slashFormat.test(dateField);\r",
									"            pm.expect(isValid, `Invalid date format for: ${dateField}`).to.be.true;\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// [1.2] TC11 - Validate no extra unexpected fields are present\r",
									"pm.test(\"[1.2] TC11 - Validate no extra unexpected fields are present\", function () {\r",
									"    const expectedFields = [\"id\", \"title\", \"author\", \"isbn\", \"publicationDate\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"links\"];\r",
									"    jsonData.forEach(book => {\r",
									"        Object.keys(book).forEach(key => {\r",
									"            pm.expect(expectedFields).to.include(key);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "G-Token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books",
							"host": [
								"{{baseURL}}books"
							]
						},
						"description": "Retrieve all books."
					},
					"response": []
				},
				{
					"name": "1.3 Get Book By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.3] TC04 - Validate that response body is a valid JSON object\r",
									"pm.test(\"[1.3] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [1.3] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[1.3] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.3] TC06 - Validate field data types\r",
									"pm.test(\"[1.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [1.3] TC07 - Validate that ID in response is positive\r",
									"pm.test(\"[1.3] TC07 - Validate that ID in response is positive\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [1.3] TC08 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[1.3] TC08 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.3] TC09 - Validate releaseDate is a valid ISO 8601 date\r",
									"pm.test(\"[1.3] TC09 - Validate releaseDate is a valid ISO 8601 date\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.releaseDate).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.3] TC10 - Validate that createdAt and updatedAt match on fetch\r",
									"pm.test(\"[1.3] TC10 - Validate that createdAt and updatedAt match on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "Retrieve a book by its ID"
					},
					"response": []
				},
				{
					"name": "1.4 Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.4] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.4] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.4] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.4] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.4] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.4] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.4] TC04 - Validate that response body is a valid JSON\r",
									"pm.test(\"[1.4] TC04 - Validate that response body is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// [1.4] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[1.4] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.4] TC06 - Validate field data types are correct\r",
									"pm.test(\"[1.4] TC06 - Validate field data types are correct\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [1.4] TC07 - Validate that ID is a positive integer\r",
									"pm.test(\"[1.4] TC07 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [1.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\r",
									"pm.test(\"[1.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.4] TC09 - Validate that updatedAt is equal to or after createdAt\r",
									"pm.test(\"[1.4] TC09 - Validate that updatedAt is equal to or after createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"// [1.4] TC10 - Validate that title, author, and isbn are not empty\r",
									"pm.test(\"[1.4] TC10 - Validate that title, author, and isbn are not empty\", function () {\r",
									"    pm.expect(jsonData.title).to.not.be.empty;\r",
									"    pm.expect(jsonData.author).to.not.be.empty;\r",
									"    pm.expect(jsonData.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC11 - Validate that releaseDate is not a future date\", function () {\r",
									"    const release = new Date(jsonData.releaseDate);\r",
									"    const now = new Date();\r",
									"    pm.expect(release.getTime()).to.be.below(now.getTime());\r",
									"});\r",
									"\r",
									"// Use only in POST requests\r",
									"pm.test(\"[1.4] TC12 - Validate that ID is unique across requests\", function () {\r",
									"    let previousId = pm.collectionVariables.get(\"previous_id\");\r",
									"    if (previousId && pm.request.method === \"POST\") {\r",
									"        pm.expect(jsonData.id).to.not.eql(Number(previousId));\r",
									"    }\r",
									"    pm.collectionVariables.set(\"previous_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.4] TC13 - Validate no extra fields are present\", function () {\r",
									"    const actualKeys = Object.keys(jsonData);\r",
									"    const expectedKeys = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"    pm.expect(actualKeys).to.have.members(expectedKeys);\r",
									"    pm.expect(actualKeys.length).to.eql(expectedKeys.length);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC14 - Validate that updatedAt is greater than or equal to createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"],\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"author\": { \"type\": \"string\" },\r",
									"        \"isbn\": { \"type\": \"string\" },\r",
									"        \"releaseDate\": { \"type\": \"string\" },\r",
									"        \"createdAt\": { \"type\": \"string\" },\r",
									"        \"updatedAt\": { \"type\": \"string\" },\r",
									"        \"id\": { \"type\": \"number\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"[1.4] TC15 - Validate response against JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"BookID\",pm.response.json().id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomWord}}\",\n    \"author\": \"{{$randomFullName}}\",\n    \"isbn\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}\",\n    \"releaseDate\": \"{{$isoTimestamp}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "Update a book by its ID."
					},
					"response": []
				},
				{
					"name": "1.5 Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [1.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[1.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [1.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[1.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "Delete a book by its ID"
					},
					"response": []
				}
			],
			"description": "Books Folder for all Book's Requests"
		},
		{
			"name": "2- Households",
			"item": [
				{
					"name": "2.1 Get All Households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.1] TC02 - Validate that response time is under 1000ms\r",
									"pm.test(\"[2.1] TC02 - Validate that response time is under 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// [2.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.1] TC04 - Validate that response body is a valid JSON array\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"[2.1] TC04 - Validate that response body is a valid JSON array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [2.1] TC05 - Validate each household has required fields\r",
									"pm.test(\"[2.1] TC05 - Validate each household has required fields\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h).to.have.property(\"name\");\r",
									"        pm.expect(h).to.have.property(\"createdAt\");\r",
									"        pm.expect(h).to.have.property(\"updatedAt\");\r",
									"        pm.expect(h).to.have.property(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC06 - Validate field data types for each household\r",
									"pm.test(\"[2.1] TC06 - Validate field data types for each household\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h.name).to.be.a(\"string\");\r",
									"        pm.expect(h.createdAt).to.be.a(\"string\");\r",
									"        pm.expect(h.updatedAt).to.be.a(\"string\");\r",
									"        pm.expect(h.id).to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC07 - Validate createdAt and updatedAt are ISO 8601 format\r",
									"pm.test(\"[2.1] TC07 - Validate createdAt and updatedAt are ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h.createdAt).to.match(isoRegex);\r",
									"        pm.expect(h.updatedAt).to.match(isoRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC08 - Validate that all household IDs are unique\r",
									"pm.test(\"[2.1] TC08 - Validate that all household IDs are unique\", function () {\r",
									"    const ids = jsonData.map(h => h.id);\r",
									"    const uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"\r",
									"// [2.1] TC09 - Validate that createdAt equals updatedAt on new entries\r",
									"pm.test(\"[2.1] TC09 - Validate createdAt and updatedAt match on new entries\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        if (h.createdAt && h.updatedAt) {\r",
									"            pm.expect(h.createdAt).to.eql(h.updatedAt);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC10 - Validate optional links array structure\r",
									"pm.test(\"[2.1] TC10 - Validate optional 'links' array structure\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        if (h.links) {\r",
									"            pm.expect(h.links).to.be.an(\"array\");\r",
									"            h.links.forEach(link => {\r",
									"                pm.expect(link).to.have.property(\"rel\");\r",
									"                pm.expect(link).to.have.property(\"href\");\r",
									"                pm.expect(link.rel).to.be.a(\"string\");\r",
									"                pm.expect(link.href).to.be.a(\"string\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households",
							"host": [
								"{{baseURL}}households"
							]
						},
						"description": "Retrieve all households."
					},
					"response": []
				},
				{
					"name": "2.3 Create New Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.3] TC04 - Validate response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.3] TC04 - Validate response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.3] TC05 - Validate response contains expected fields\r",
									"pm.test(\"[2.3] TC05 - Validate response contains expected fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.3] TC06 - Validate field data types\r",
									"pm.test(\"[2.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.3] TC08 - Validate createdAt and updatedAt match on creation\r",
									"pm.test(\"[2.3] TC08 - Validate createdAt and updatedAt match on creation\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [2.3] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.3] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.3] TC10 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.3] TC10 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"HouseholdID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households",
							"host": [
								"{{baseURL}}households"
							]
						},
						"description": "Create a new household"
					},
					"response": []
				},
				{
					"name": "2.2 Get Household By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.2] TC04 - Validate that response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.2] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.2] TC05 - Validate that required fields are present\r",
									"pm.test(\"[2.2] TC05 - Validate that required fields are present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.2] TC06 - Validate field data types\r",
									"pm.test(\"[2.2] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.2] TC07 - Validate ISO 8601 format for createdAt and updatedAt\r",
									"pm.test(\"[2.2] TC07 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.2] TC08 - Validate createdAt and updatedAt are equal on fetch\r",
									"pm.test(\"[2.2] TC08 - Validate createdAt and updatedAt are equal on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [2.2] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.2] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.2] TC10 - Validate id is a positive integer\r",
									"pm.test(\"[2.2] TC10 - Validate id is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "Retrieve a household by its ID"
					},
					"response": []
				},
				{
					"name": "2.4 Update Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.3] TC04 - Validate response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.3] TC04 - Validate response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.3] TC05 - Validate response contains expected fields\r",
									"pm.test(\"[2.3] TC05 - Validate response contains expected fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.3] TC06 - Validate field data types\r",
									"pm.test(\"[2.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.3] TC08 - Validate that updatedAt is greater than or equal to createdAt\r",
									"pm.test(\"[2.3] TC08 - Validate that updatedAt is greater than or equal to createdAt\", function () {\r",
									"    const createdAt = new Date(jsonData.createdAt);\r",
									"    const updatedAt = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
									"});\r",
									"\r",
									"\r",
									"// [2.3] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.3] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.3] TC10 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.3] TC10 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"HouseholdID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "Update a household by its ID"
					},
					"response": []
				},
				{
					"name": "2.5 Delete Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "Delete a household by its ID."
					},
					"response": []
				}
			],
			"description": "Households Folder for all Household's Requests"
		},
		{
			"name": "3- Users",
			"item": [
				{
					"name": "3.1 Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.1] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.1] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.1] TC04 - Validate that response is an array\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.1] TC04 - Validate that response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [3.1] TC05 - Validate required fields exist in first user\r",
									"pm.test(\"[3.1] TC05 - Validate required fields exist in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user).to.have.property(\"id\");\r",
									"    pm.expect(user).to.have.property(\"firstName\");\r",
									"    pm.expect(user).to.have.property(\"lastName\");\r",
									"    pm.expect(user).to.have.property(\"email\");\r",
									"    pm.expect(user).to.have.property(\"createdAt\");\r",
									"    pm.expect(user).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.1] TC06 - Validate field data types in first user\r",
									"pm.test(\"[3.1] TC06 - Validate field data types in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user.id).to.be.a(\"number\");\r",
									"    pm.expect(user.firstName).to.be.a(\"string\");\r",
									"    pm.expect(user.lastName).to.be.a(\"string\");\r",
									"    pm.expect(user.email).to.be.a(\"string\");\r",
									"    pm.expect(user.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(user.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.1] TC07 - Validate ISO 8601 format for createdAt and updatedAt in first user\r",
									"pm.test(\"[3.1] TC07 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const user = jsonData[0];\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(user.createdAt).to.match(isoRegex);\r",
									"    pm.expect(user.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.1] TC08 - Validate createdAt and updatedAt match in first user\r",
									"pm.test(\"[3.1] TC08 - Validate createdAt and updatedAt match in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user.createdAt).to.eql(user.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.1] TC09 - Validate second user exists\r",
									"pm.test(\"[3.1] TC09 - Validate second user exists\", function () {\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(1);\r",
									"});\r",
									"\r",
									"// [3.1] TC10 - Validate first two users have different IDs\r",
									"pm.test(\"[3.1] TC10 - Validate first two users have different IDs\", function () {\r",
									"    const user1 = jsonData[0];\r",
									"    const user2 = jsonData[1];\r",
									"    pm.expect(user1.id).to.not.eql(user2.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users",
							"host": [
								"{{baseURL}}users"
							]
						},
						"description": "Retrieve all users"
					},
					"response": []
				},
				{
					"name": "3.3 Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.3] TC04 - Validate required fields exist\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.3] TC04 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.3] TC05 - Validate field data types\r",
									"pm.test(\"[3.3] TC05 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.3] TC07 - Validate createdAt and updatedAt match\r",
									"pm.test(\"[3.3] TC07 - Validate createdAt and updatedAt match\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.3] TC08 - Validate firstName, lastName, email are not empty\r",
									"pm.test(\"[3.3] TC08 - Validate firstName, lastName, email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.3] TC09 - Validate ID is a positive integer\r",
									"pm.test(\"[3.3] TC09 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"UserID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users",
							"host": [
								"{{baseURL}}users"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "3.2 Get User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.2] TC04 - Validate that response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.2] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [3.2] TC05 - Validate required fields exist\r",
									"pm.test(\"[3.2] TC05 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.2] TC06 - Validate data types of fields\r",
									"pm.test(\"[3.2] TC06 - Validate data types of fields\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.2] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.2] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.2] TC08 - Validate createdAt and updatedAt match on fetch\r",
									"pm.test(\"[3.2] TC08 - Validate createdAt and updatedAt match on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.2] TC09 - Validate firstName, lastName, and email are not empty\r",
									"pm.test(\"[3.2] TC09 - Validate firstName, lastName, and email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.2] TC10 - Validate ID is a positive integer\r",
									"pm.test(\"[3.2] TC10 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "Retrieve a user by its ID"
					},
					"response": []
				},
				{
					"name": "3.4 Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.3] TC04 - Validate required fields exist\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.3] TC04 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.3] TC05 - Validate field data types\r",
									"pm.test(\"[3.3] TC05 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.3] TC07 - Validate firstName, lastName, email are not empty\r",
									"pm.test(\"[3.4] TC07 - Validate firstName, lastName, and email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.3] TC08 - Validate ID is a positive integer\r",
									"pm.test(\"[3.3] TC08 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"UserID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "Update a user by its ID"
					},
					"response": []
				},
				{
					"name": "3.5 Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "Delete User by It's ID"
					},
					"response": []
				}
			],
			"description": "Users Folder for all user's Requests"
		},
		{
			"name": "4- Wishlists",
			"item": [
				{
					"name": "4.1 Get All Wishlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.1] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.1] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.1] TC04 - Validate response is an array\r",
									"pm.test(\"[4.1] TC04 - Validate response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [4.1] TC05 - Validate each wishlist object has required fields\r",
									"pm.test(\"[4.1] TC05 - Validate each wishlist object has required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"books\");\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC06 - Validate 'books' is an array\r",
									"pm.test(\"[4.1] TC06 - Validate 'books' is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.books).to.be.an(\"array\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC07 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.1] TC07 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.id).to.be.above(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC08 - Validate 'name' is not empty\r",
									"pm.test(\"[4.1] TC08 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.name).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC09 - Validate optional timestamps if present\r",
									"pm.test(\"[4.1] TC09 - Validate optional timestamps if present\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    jsonData.forEach(item => {\r",
									"        if (item.createdAt) {\r",
									"            pm.expect(item.createdAt).to.match(isoRegex);\r",
									"        }\r",
									"        if (item.updatedAt) {\r",
									"            pm.expect(item.updatedAt).to.match(isoRegex);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists",
							"host": [
								"{{baseURL}}wishlists"
							]
						},
						"description": "Retrive all wishlists"
					},
					"response": []
				},
				{
					"name": "4.3 Create New Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.3] TC04 - Validate required fields exist\r",
									"pm.test(\"[4.3] TC04 - Validate required fields exist\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.3] TC05 - Validate field data types\r",
									"pm.test(\"[4.3] TC05 - Validate field data types\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.3] TC07 - Validate createdAt and updatedAt match on creation\r",
									"pm.test(\"[4.3] TC07 - Validate createdAt and updatedAt match on creation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [4.3] TC08 - Validate 'name' is not empty\r",
									"pm.test(\"[4.3] TC08 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.3] TC09 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.3] TC09 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"WishlistID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"books\": []\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}wishlists",
							"host": [
								"{{baseURL}}wishlists"
							]
						},
						"description": "Create new wishlist"
					},
					"response": []
				},
				{
					"name": "4.2 Get Wishlist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.2] TC04 - Validate response is a valid object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[4.2] TC04 - Validate response is a valid object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [4.2] TC05 - Validate required fields exist\r",
									"pm.test(\"[4.2] TC05 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.2] TC06 - Validate field data types\r",
									"pm.test(\"[4.2] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.2] TC07 - Validate createdAt and updatedAt follow ISO 8601 format\r",
									"pm.test(\"[4.2] TC07 - Validate createdAt and updatedAt follow ISO 8601 format\", function () {\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.2] TC08 - Validate createdAt and updatedAt are equal\r",
									"pm.test(\"[4.2] TC08 - Validate createdAt and updatedAt are equal\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [4.2] TC09 - Validate name is not empty\r",
									"pm.test(\"[4.2] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.2] TC10 - Validate ID is a positive integer\r",
									"pm.test(\"[4.2] TC10 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "Reterive wishlist by it's ID"
					},
					"response": []
				},
				{
					"name": "4.4 Update Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.3] TC04 - Validate required fields exist\r",
									"pm.test(\"[4.3] TC04 - Validate required fields exist\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.3] TC05 - Validate field data types\r",
									"pm.test(\"[4.3] TC05 - Validate field data types\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.3] TC07 - Validate 'name' is not empty\r",
									"pm.test(\"[4.3] TC07 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.3] TC08 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.3] TC08 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"WishlistID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomDomainName}}\",\n    \"books\": [1, 2]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "Update wishlist by it's ID"
					},
					"response": []
				},
				{
					"name": "4.5 Delete Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "Delete wishlist by it's ID"
					},
					"response": []
				}
			],
			"description": "Wighlist Folder for all wishlist's Requests"
		}
	],
	"variable": [
		{
			"key": "previous_id",
			"value": ""
		},
		{
			"key": "BookID",
			"value": ""
		},
		{
			"key": "HouseholdID",
			"value": ""
		},
		{
			"key": "UserID",
			"value": ""
		},
		{
			"key": "WishlistID",
			"value": ""
		}
	]
}